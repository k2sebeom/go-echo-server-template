// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	schema "github.com/k2sebeom/go-echo-server-template/models/schema"
)

// MockIAuthRepository is an autogenerated mock type for the IAuthRepository type
type MockIAuthRepository struct {
	mock.Mock
}

type MockIAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthRepository) EXPECT() *MockIAuthRepository_Expecter {
	return &MockIAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateNewPasswordCred provides a mock function with given fields: cred
func (_m *MockIAuthRepository) CreateNewPasswordCred(cred *schema.PasswordCredential) (*schema.PasswordCredential, error) {
	ret := _m.Called(cred)

	var r0 *schema.PasswordCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(*schema.PasswordCredential) (*schema.PasswordCredential, error)); ok {
		return rf(cred)
	}
	if rf, ok := ret.Get(0).(func(*schema.PasswordCredential) *schema.PasswordCredential); ok {
		r0 = rf(cred)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.PasswordCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(*schema.PasswordCredential) error); ok {
		r1 = rf(cred)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_CreateNewPasswordCred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewPasswordCred'
type MockIAuthRepository_CreateNewPasswordCred_Call struct {
	*mock.Call
}

// CreateNewPasswordCred is a helper method to define mock.On call
//   - cred *schema.PasswordCredential
func (_e *MockIAuthRepository_Expecter) CreateNewPasswordCred(cred interface{}) *MockIAuthRepository_CreateNewPasswordCred_Call {
	return &MockIAuthRepository_CreateNewPasswordCred_Call{Call: _e.mock.On("CreateNewPasswordCred", cred)}
}

func (_c *MockIAuthRepository_CreateNewPasswordCred_Call) Run(run func(cred *schema.PasswordCredential)) *MockIAuthRepository_CreateNewPasswordCred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*schema.PasswordCredential))
	})
	return _c
}

func (_c *MockIAuthRepository_CreateNewPasswordCred_Call) Return(_a0 *schema.PasswordCredential, _a1 error) *MockIAuthRepository_CreateNewPasswordCred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_CreateNewPasswordCred_Call) RunAndReturn(run func(*schema.PasswordCredential) (*schema.PasswordCredential, error)) *MockIAuthRepository_CreateNewPasswordCred_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredByEmail provides a mock function with given fields: email
func (_m *MockIAuthRepository) GetCredByEmail(email string) (*schema.PasswordCredential, error) {
	ret := _m.Called(email)

	var r0 *schema.PasswordCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*schema.PasswordCredential, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *schema.PasswordCredential); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.PasswordCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetCredByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredByEmail'
type MockIAuthRepository_GetCredByEmail_Call struct {
	*mock.Call
}

// GetCredByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockIAuthRepository_Expecter) GetCredByEmail(email interface{}) *MockIAuthRepository_GetCredByEmail_Call {
	return &MockIAuthRepository_GetCredByEmail_Call{Call: _e.mock.On("GetCredByEmail", email)}
}

func (_c *MockIAuthRepository_GetCredByEmail_Call) Run(run func(email string)) *MockIAuthRepository_GetCredByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIAuthRepository_GetCredByEmail_Call) Return(_a0 *schema.PasswordCredential, _a1 error) *MockIAuthRepository_GetCredByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetCredByEmail_Call) RunAndReturn(run func(string) (*schema.PasswordCredential, error)) *MockIAuthRepository_GetCredByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredByUserId provides a mock function with given fields: userId
func (_m *MockIAuthRepository) GetCredByUserId(userId uint) (*schema.PasswordCredential, error) {
	ret := _m.Called(userId)

	var r0 *schema.PasswordCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*schema.PasswordCredential, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) *schema.PasswordCredential); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.PasswordCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepository_GetCredByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredByUserId'
type MockIAuthRepository_GetCredByUserId_Call struct {
	*mock.Call
}

// GetCredByUserId is a helper method to define mock.On call
//   - userId uint
func (_e *MockIAuthRepository_Expecter) GetCredByUserId(userId interface{}) *MockIAuthRepository_GetCredByUserId_Call {
	return &MockIAuthRepository_GetCredByUserId_Call{Call: _e.mock.On("GetCredByUserId", userId)}
}

func (_c *MockIAuthRepository_GetCredByUserId_Call) Run(run func(userId uint)) *MockIAuthRepository_GetCredByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIAuthRepository_GetCredByUserId_Call) Return(_a0 *schema.PasswordCredential, _a1 error) *MockIAuthRepository_GetCredByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetCredByUserId_Call) RunAndReturn(run func(uint) (*schema.PasswordCredential, error)) *MockIAuthRepository_GetCredByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthRepository creates a new instance of MockIAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthRepository {
	mock := &MockIAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
